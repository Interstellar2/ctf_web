#TASK1

[TOC]




##Git
###Git仓库的创建及文件添加
>创建Git仓库：使用git init命令
>文件添加：1.git add +文件名 2.git commit（git commit -m +”message“为这所有已经进入stage的改变添加一个commit信息）
###查看工作区状态
>掌握工作区状态：使用git status命令
>查看修改内容：使用git  diff查看修改内容
##密码学预热
###1.数制转换
>**进制概念**：二进制数据是用0和1来表示，进位规则是“逢二进一”，借位规则为“借一当二”，其他如八进制，十进制，十六进制的概念类似
>**进制转换**：
- 二进制->十进制：按权展开求和
- 十进制->二进制：
1.整数,则除二取余，逆序排列得二进制数
2.小数，则乘二取整得二进制数
- 二进制->八进制：从小数点开始，整数部分向左，小数部分向右，每三位用一八进制数表示即可
- 八进制->二进制：类似二进制转化为八进制的方法，把每个八进制数转化为三位二进制数表示即可
-  二进制与十六进制的相互转换可模仿二进制与八进制的转换
###2.逻辑运算
>**1.与、或、非、异或的逻辑运算**
- 与：同真才为真
- 或：只要有一个为真，结果即为真
- 非：指指定值的反值
-  异或：一真一假，结果才为真

>**2.明码、补码与反码的概念**
example:
1100110011 原 
1011001100 反 除符号位，按位取反 
1011001101 补 除符号位，按位取反再加1
###3.初识密码学
>**基本概念认识**
-** 明文**：指没有加密的文字或者字符串，有意义的字符或比特集，或通过某种公开的编码标准就能获得的消息
- **密文**：经过某个加密算法进行作用，将作用后的文字称为密文
- **密钥**：密钥是一种参数，它是在明文转换为密文或将密文转换为明文的算法中输入的参数。密钥分为对称密钥与非对称密钥。
- **公钥**：公有的钥匙
- **私钥**：私有的钥匙
- **密钥空间**：通常以位为单位，即以位的多少来对独特密钥进行计数。密钥的位越长，其密钥空间也就越大。

>**各类加密体制**
- **凯撒密码**：利用26个字母密码表，规定移动位数，将字母替换掉获得密文，可用来实现加密解密。该种移位加密法很简单。也很容易被破解获取明文。
- **简单代替密码**：相较于凯撒密码，具有较高的安全性，其利用一个打乱顺序的二十六个字母的密码表，来替换字母转换为密文。其破解可利用**字母频度分析法**，我们只需要找一篇一定长度的相同语言的样本文章，统计字母使用频率，再将密文中字母替换成具有相同频率的样本中的字母
-**换位密码**：明文以固定的宽度水平的写在一张图表纸上，密文按垂直方向读出，解密就是密文按相同的宽度垂直的写在图表纸上，然后水平的读出明文（由于密文字符和明文字符相同，可利用频数分析找到密文对应的明文字母）
- **分组密码**：将明文消息编码表示后的数字序列，划分成长度为n的组，每组分别在密钥的控制下变换成等长的输出数字序列。
- **对称密码**：对称密码就是加密和解密用的是同一个密钥
- **公钥密码**:加密和解密有两个密码，一个是公钥，一个是私钥

>**相关**
- **单向散列函数（Hash函数）**：将字符串M转化相同长度的字符串M'，其他任意字符串均无法转化为字符串M'，字符串M'也不能找到输入串。
- **消息认证码**：带密钥的Hash函数，可用于数据源发认证和完整性校验
- **数字签名**
- **数字证书**
- **伪随机数生成器**

##汇编
###了解了寄存器的性质和应用
